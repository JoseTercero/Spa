// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Spa.Data;

#nullable disable

namespace Spa.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221223042601_AllTables")]
    partial class AllTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Spa.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("Spa.Models.BookingStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("BookingStatus");
                });

            modelBuilder.Entity("Spa.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BookingId")
                        .HasColumnType("int");

                    b.Property<int?>("BookingId1")
                        .HasColumnType("int");

                    b.Property<int?>("BookingId2")
                        .HasColumnType("int");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("BookingId1");

                    b.HasIndex("BookingId2");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("Spa.Models.Treatment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("BookingId")
                        .HasColumnType("int");

                    b.Property<int?>("BookingId1")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("BookingId1");

                    b.ToTable("Treatment");
                });

            modelBuilder.Entity("Spa.Models.TreatmentTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.ToTable("TreatmentTime");
                });

            modelBuilder.Entity("Spa.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastNames")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Spa.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Spa.Models.BookingStatus", b =>
                {
                    b.HasOne("Spa.Models.Booking", null)
                        .WithMany("Status")
                        .HasForeignKey("BookingId");
                });

            modelBuilder.Entity("Spa.Models.Schedule", b =>
                {
                    b.HasOne("Spa.Models.Booking", null)
                        .WithMany("Date")
                        .HasForeignKey("BookingId");

                    b.HasOne("Spa.Models.Booking", null)
                        .WithMany("Masseuce")
                        .HasForeignKey("BookingId1");

                    b.HasOne("Spa.Models.Booking", null)
                        .WithMany("Time")
                        .HasForeignKey("BookingId2");
                });

            modelBuilder.Entity("Spa.Models.Treatment", b =>
                {
                    b.HasOne("Spa.Models.Booking", null)
                        .WithMany("Name")
                        .HasForeignKey("BookingId");

                    b.HasOne("Spa.Models.Booking", null)
                        .WithMany("Price")
                        .HasForeignKey("BookingId1");
                });

            modelBuilder.Entity("Spa.Models.TreatmentTime", b =>
                {
                    b.HasOne("Spa.Models.Schedule", null)
                        .WithMany("Time")
                        .HasForeignKey("ScheduleId");
                });

            modelBuilder.Entity("Spa.Models.User", b =>
                {
                    b.HasOne("Spa.Models.Booking", null)
                        .WithMany("User")
                        .HasForeignKey("BookingId");

                    b.HasOne("Spa.Models.Schedule", null)
                        .WithMany("User")
                        .HasForeignKey("ScheduleId");
                });

            modelBuilder.Entity("Spa.Models.UserRole", b =>
                {
                    b.HasOne("Spa.Models.User", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Spa.Models.Booking", b =>
                {
                    b.Navigation("Date");

                    b.Navigation("Masseuce");

                    b.Navigation("Name");

                    b.Navigation("Price");

                    b.Navigation("Status");

                    b.Navigation("Time");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Spa.Models.Schedule", b =>
                {
                    b.Navigation("Time");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Spa.Models.User", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
